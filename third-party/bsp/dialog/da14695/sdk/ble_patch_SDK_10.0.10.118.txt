diff -aur SDK_10.0.10.118/sdk/interfaces/ble/adapter/src/ad_ble.c ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.10.118/sdk/interfaces/ble/adapter/src/ad_ble.c
--- SDK_10.0.10.118/sdk/interfaces/ble/adapter/src/ad_ble.c	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.10.118/sdk/interfaces/ble/adapter/src/ad_ble.c	2020-05-21 16:00:33.693168168 +0300
@@ -19,8 +19,8 @@
 #include "ble_config.h"
 
 #include "osal.h"
-#include "queue.h"
-#include "event_groups.h"
+// #include "queue.h"
+// #include "event_groups.h"
 #if (BLE_WINDOW_STATISTICS == 1) || (BLE_SLEEP_PERIOD_DEBUG == 1)
 #include "logging.h"
 #endif
@@ -247,6 +247,7 @@
         OS_TASK_NOTIFY(adapter_if.task, mainBIT_EVENT_QUEUE_AVAIL, OS_NOTIFY_SET_BITS);
 }
 
+#include "interrupts.h"
 void ad_ble_task_notify(uint32_t value)
 {
         if (in_interrupt()) {
@@ -494,7 +495,7 @@
                 /* Check if we should call the previously skipped TX done callback */
                 if (ulNotifiedValue & mainBIT_EVENT_QUEUE_AVAIL) {
                         sleep_status = BLE_ACTIVE;
-                        if (ad_ble_stack_wr_cb && uxQueueSpacesAvailable(adapter_if.evt_q)) {
+                        if (ad_ble_stack_wr_cb && OS_QUEUE_SPACES_AVAILABLE(adapter_if.evt_q)) {
                                 /* Call pending BLE stack write callback */
                                 ad_ble_stack_wr_cb(BLE_STACK_IO_OK);
 
@@ -535,7 +536,7 @@
 
                 if (ulNotifiedValue & mainBIT_COMMAND_QUEUE) {
                         /* The message may have already been read in the while () loop below! */
-                        if ( OS_QUEUE_GET(adapter_if.cmd_q, &received_msg, 0)) {
+                        if ( OS_QUEUE_GET(adapter_if.cmd_q, &received_msg, 0) == OS_QUEUE_OK) {
                                 /* Make sure a valid OP CODE is received */
                                 OS_ASSERT(received_msg->op_code < AD_BLE_OP_CODE_LAST);
                                 current_op = received_msg->op_code;
@@ -586,7 +587,7 @@
 
 
                         /* Check command queue for incoming messages */
-                        if (uxQueueMessagesWaiting(adapter_if.cmd_q)) {
+                        if (OS_QUEUE_MESSAGES_WAITING(adapter_if.cmd_q)) {
                                 /* Get message from the command queue. */
                                 OS_QUEUE_GET(adapter_if.cmd_q, &received_msg, 0);
                                 /* Make sure a valid op code is received */
@@ -607,10 +608,10 @@
                                         OS_FREE(received_msg);
                                 }
                         }
-                        else if ( (USE_BLE_SLEEP == 1) && (cm_lp_clk_is_avail()) && (!stay_active) ) {
-                                /* Sleep is possible only when the LP clock is ready! */
-                                ret = sleep_when_possible();
-                        }
+                        //else if ( (USE_BLE_SLEEP == 1) && (cm_lp_clk_is_avail()) && (!stay_active) ) {
+                        //        /* Sleep is possible only when the LP clock is ready! */
+                        //        ret = sleep_when_possible();
+                        //}
                         else if (ble_block()) {
                                 /* There are no pending BLE actions, so exit the while () loop. */
                                 ret = -1;
@@ -810,9 +811,9 @@
                         ble_stack_initialized = true;
 
                         /* Apply TCS settings */
-                        ad_ble_sys_tcs_config();
-                        ad_ble_synth_tcs_config();
-                        ad_ble_rfcu_tcs_config();
+                        //ad_ble_sys_tcs_config();
+                        //ad_ble_synth_tcs_config();
+                        //ad_ble_rfcu_tcs_config();
 #if (USE_BLE_SLEEP == 1)
                         ad_ble_update_wakeup_time();
                         #if (dg_configUSE_LP_CLK == LP_CLK_RCX)
@@ -967,7 +968,7 @@
                         /* Post item to queue. */
                         if (ad_ble_event_queue_send(&msgBuf, 0) == OS_OK) {
                                 /* Check free space on BLE adapter's event queue. */
-                                if (uxQueueSpacesAvailable(adapter_if.evt_q)) {
+                                if (OS_QUEUE_SPACES_AVAILABLE(adapter_if.evt_q)) {
                                         /* Call BLE stack I/O TX done callback right away. */
                                         callback(BLE_STACK_IO_OK);
                                 } else {
@@ -1049,9 +1050,9 @@
         return ble_parameters;
 }
 #if (dg_configPMU_ADAPTER == 1)
-ADAPTER_INIT_DEP2(ad_ble_adapter, ad_ble_init, ad_pmu_adapter, ad_nvparam_adapter);
+//ADAPTER_INIT_DEP2(ad_ble_adapter, ad_ble_init, ad_pmu_adapter, ad_nvparam_adapter);
 #else
-ADAPTER_INIT_DEP1(ad_ble_adapter, ad_ble_init, ad_nvparam_adapter);
+//ADAPTER_INIT_DEP1(ad_ble_adapter, ad_ble_init, ad_nvparam_adapter);
 #endif /* dg_configPMU_ADAPTER */
 
 #elif (dg_configNVMS_ADAPTER == 1)
@@ -1065,9 +1066,9 @@
 #else
 
 #if (dg_configPMU_ADAPTER == 1)
-ADAPTER_INIT_DEP1(ad_ble_adapter, ad_ble_init, ad_pmu_adapter);
+//ADAPTER_INIT_DEP1(ad_ble_adapter, ad_ble_init, ad_pmu_adapter);
 #else
-ADAPTER_INIT(ad_ble_adapter, ad_ble_init);
+//ADAPTER_INIT(ad_ble_adapter, ad_ble_init);
 #endif /* dg_configPMU_ADAPTER */
 
 #endif /* dg_configNVPARAM_ADAPTER */
@@ -1079,7 +1080,7 @@
 }
 #endif /* CONFIG_USE_BLE */
 
-void cmac2sys_notify()
+__attribute__((weak)) void cmac2sys_notify()
 {
         OS_TASK_NOTIFY_FROM_ISR(adapter_if.task, mainBIT_BLE_CMAC_IRQ, OS_NOTIFY_SET_BITS);
 }
diff -aur SDK_10.0.10.118/sdk/interfaces/ble/stack/da14690/src/arch_main.c ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.10.118/sdk/interfaces/ble/stack/da14690/src/arch_main.c
--- SDK_10.0.10.118/sdk/interfaces/ble/stack/da14690/src/arch_main.c	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.10.118/sdk/interfaces/ble/stack/da14690/src/arch_main.c	2020-05-21 15:53:14.276708040 +0300
@@ -52,8 +52,8 @@
 void lib_ble_stack_reset(uint8_t reset_type);
 bool cmac_cpu_wakeup(void);
 
-void timer_init(void);
-void ble_timer_callback(void* varg);
+//void timer_init(void);
+//void ble_timer_callback(void* varg);
 
 bool ke_sleep_check(void);
 
@@ -64,7 +64,7 @@
 #define KE_GROSSTIMER_MASK      ((uint32_t)0x007FFFFF)
 #define ODD_TO_NEXT_EVEN(x)     ((x) & 0x01 ? x+1 : x)
 
-__RETAINED OS_TIMER ble_timer;
+//__RETAINED OS_TIMER ble_timer;
 __RETAINED uint8_t cmac_system_tcs_length;
 __RETAINED uint8_t cmac_synth_tcs_length;
 __RETAINED uint8_t cmac_rfcu_tcs_length;
@@ -260,6 +260,7 @@
                 power_ctrl_reg_values.onsleep_value;
 
         GLOBAL_INT_RESTORE();
+#if 0
 
         /*
          * Check NVPARAM for valid configuration values and write to proper CMAC configuration table
@@ -310,7 +311,7 @@
                 cmac_dynamic_config_table_ptr->sleep_enable = (bool) sleep_nvparam;
                 ad_ble_stay_active(!sleep_nvparam);
         }
-
+#endif
 }
 
 /**
@@ -322,6 +323,7 @@
  *       CMAC parameters.
  ****************************************************************************************
  */
+extern int os_arch_main_init(void);
 void ble_stack_init(void)
 {
         /* Make sure that LP clock is enabled */
@@ -345,7 +347,9 @@
         }
 
         /* Initialize BLE timer */
-        timer_init();
+        //timer_init();
+
+		os_arch_main_init();
 
         /* Initialize BLE stack (Controller and Host) */
         lib_ble_stack_init();
@@ -468,6 +472,7 @@
         return result;
 }
 
+#if 0
 /*
  * @brief Initialize BLE timer
  */
@@ -476,6 +481,7 @@
         ble_timer = OS_TIMER_CREATE("ble_tmr", 100 /* Dummy */, 0, 0, ble_timer_callback);
         OS_ASSERT(ble_timer);
 }
+#endif
 
 /*
  * @brief Retrieve current time.
@@ -484,11 +490,14 @@
  */
 uint32_t timer_get_time(void)
 {
+#if 0
         uint32_t current_time_10ms;
 
         current_time_10ms = (OS_TICKS_2_MS(OS_GET_TICK_COUNT()) / 10) & KE_GROSSTIMER_MASK;
 
         return current_time_10ms;
+#endif
+	return 0;
 }
 
 /*
@@ -498,6 +507,7 @@
  */
 void timer_set_timeout(uint32_t to)
 {
+#if 0
         OS_BASE_TYPE ret;
         uint32_t current_time_10ms, timeout_10ms;
 
@@ -518,6 +528,7 @@
         }
 
         OS_ASSERT(ret == OS_TIMER_SUCCESS);
+#endif
 }
 
 /*
@@ -525,6 +536,7 @@
  */
 void timer_enable(bool enable)
 {
+#if 0
         OS_BASE_TYPE ret;
 
         OS_ASSERT(ble_timer);
@@ -544,6 +556,7 @@
         }
 
         OS_ASSERT(ret == OS_TIMER_SUCCESS);
+#endif
 }
 
 void sys_temp_meas_enable(void)
@@ -560,4 +573,8 @@
 #endif
 }
 
+void crypto_init(void) {
+
+}
+
 #endif /* CONFIG_USE_BLE */
